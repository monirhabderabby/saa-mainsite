datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model Department {
    id         String   @id @default(cuid())
    name       String   @unique
    employeeId String[]
    // e.g. "Operation", "Sales", "BPU"
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    teams             Team[]
    serviceCategories ServiceCategory[]
    userRoles         UserRole[] // dept-scoped roles
    users             User[] // optional home dept

    @@index([name])
}

model ServiceCategory {
    id           String   @id @default(cuid())
    name         String
    departmentId String
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    department Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)
    teams      Team[]

    @@unique([departmentId, name])
    @@index([departmentId])
}

model Team {
    id                String   @id @default(cuid())
    name              String
    departmentId      String
    serviceCategoryId String?
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt

    department      Department       @relation(fields: [departmentId], references: [id], onDelete: Cascade)
    serviceCategory ServiceCategory? @relation(fields: [serviceCategoryId], references: [id], onDelete: SetNull)

    members UserTeam[]
    roles   UserRole[] // team-scoped roles

    @@unique([departmentId, name])
    @@index([departmentId])
    @@index([serviceCategoryId])
}

model User {
    id           String     @id @default(cuid())
    email        String     @unique
    firstName    String?
    lastName     String?
    departmentId String?
    password     String
    dateOfBirth  DateTime?
    gender       String?
    phone        String?
    status       UserStatus @default(PENDING)

    employeeId            String?   @unique
    address               String?
    emergencyContactName  String?
    emergencyContactPhone String?
    joinDate              DateTime?
    designation           String? // e.g. "AGM", "Team Leader"

    department  Department? @relation(fields: [departmentId], references: [id], onDelete: SetNull)
    memberships UserTeam[]
    roles       UserRole[]

    accounts      Account[]
    sessions      Session[]
    // Optional for WebAuthn support
    Authenticator Authenticator[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([departmentId])
}

enum UserStatus {
    PENDING
    APPROVED
    REJECTED
    INACTIVE // Scalable for future (e.g., left company)
}

model Account {
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([provider, providerAccountId])
}

model Session {
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    identifier String
    token      String
    expires    DateTime

    @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
    credentialID         String  @unique
    userId               String
    providerAccountId    String
    credentialPublicKey  String
    counter              Int
    credentialDeviceType String
    credentialBackedUp   Boolean
    transports           String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([userId, credentialID])
}

model UserTeam {
    userId String
    teamId String
    title  String? // e.g., "AGM", "Team Leader", "Member"
    from   DateTime  @default(now())
    to     DateTime?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

    @@id([userId, teamId])
    @@index([teamId])
}

enum Role {
    GM // Global: Approves users, all access
    HR // Global: Manages users
    AGM_OPERATION // Dept: Operation AGM
    AGM_SALES // Dept: Sales AGM
    TEAM_LEADER_SALES // Team: Sales team leader
    SALES_MEMBER // Team: Sales member
    OPERATION_MEMBER // Team: Operation member
}

enum RoleScope {
    GLOBAL
    DEPARTMENT
    TEAM
}

model Permission {
    id        String   @id @default(cuid())
    // canonical: "<resource>:<action>" e.g. "issue:create", "issue:status:update"
    key       String   @unique
    resource  String // e.g., "issue", "update"
    action    String // e.g., "create", "read", "update", "delete", "status:update"
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    roles RolePermission[]

    @@index([resource, action])
}

model RolePermission {
    roleId       String
    permissionId String

    role       Role
    permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

    @@id([roleId, permissionId])
}

model UserRole {
    id           String   @id @default(cuid())
    userId       String
    roleId       String
    // Optional scoping: a role can be global, department-scoped, or team-scoped
    departmentId String?
    teamId       String?
    createdAt    DateTime @default(now())

    user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    role       Role
    department Department? @relation(fields: [departmentId], references: [id], onDelete: SetNull)
    team       Team?       @relation(fields: [teamId], references: [id], onDelete: SetNull)

    @@index([userId])
    @@index([roleId])
    @@index([departmentId])
    @@index([teamId])
}
