datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

enum AccountStatus {
    PENDING
    ACTIVE
    DEACTIVE
}

enum Role {
    SUPER_ADMIN
    ADMIN
    OPERATION_MEMBER
    SALES_MEMBER
}

enum PermissionTool {
    ISSUE_SHEET
    UPDATE_SHEET
}

model User {
    id            String        @id @default(auto()) @map("_id") @db.ObjectId
    fullName      String?
    email         String        @unique
    emailVerified DateTime?
    image         String?
    employeeId    String        @unique
    accountStatus AccountStatus @default(PENDING)
    role          Role
    password      String

    // designationId String       @db.ObjectId 
    // designation   Designations @relation(fields: [designationId], references: [id], onDelete: Cascade)

    serviceId String?   @db.ObjectId
    service   Services? @relation(fields: [serviceId], references: [id])

    accounts            Account[]
    sessions            Session[]
    permissions         Permissions[]
    userTeams           UserTeam[]
    Authenticator       Authenticator[]
    updateSheetsEntries UpdateSheet[]   @relation("UpdateEntries")
    tlCheckEntries      UpdateSheet[]   @relation("TLChecks")
    doneByEntries       UpdateSheet[]   @relation("DoneByChecks")

    issueSheets         IssueSheet[]
    statusChangeOnIssue IssueSheet[] @relation("issueShetStatusChange")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model UserVerification {
    id       String   @id @default(auto()) @map("_id") @db.ObjectId
    userId   String   @db.ObjectId
    expireOn DateTime
    token    String   @unique

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Services {
    id   String @id @default(auto()) @map("_id") @db.ObjectId
    name String

    teams Team[]
    users User[]

    issues IssueSheet[]

    designations Designations[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Designations {
    id   String @id @default(auto()) @map("_id") @db.ObjectId
    name String

    serviceId String   @db.ObjectId
    service   Services @relation(fields: [serviceId], references: [id], onDelete: Cascade)

    // users User[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Profile {
    id   String @id @default(auto()) @map("_id") @db.ObjectId
    name String

    // ref
    updateSheets UpdateSheet[]

    // 
    issueSheets IssueSheet[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Team {
    id   String @id @default(auto()) @map("_id") @db.ObjectId
    name String

    userId    String?      @db.ObjectId
    serviceId String?      @db.ObjectId
    userTeams UserTeam[]
    issues    IssueSheet[]
    service   Services?    @relation(fields: [serviceId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Permissions {
    id   String         @id @default(auto()) @map("_id") @db.ObjectId
    name PermissionTool

    userId String? @db.ObjectId
    user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

    // issue sheet (tool)
    isIssueUpdatAllowed  Boolean @default(true)
    isIssueCreateAllowed Boolean @default(false)

    // update sheet (tool)
    isMessageCreateAllowed  Boolean @default(false)
    isMessageTLCheckAllowed Boolean @default(false)
    isMessageDoneByAllowed  Boolean @default(false)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String
    expires    DateTime

    @@unique([identifier, token])
}

model Authenticator {
    id                   String  @id @default(auto()) @map("_id") @db.ObjectId
    credentialID         String  @unique
    userId               String  @db.ObjectId
    providerAccountId    String
    credentialPublicKey  String
    counter              Int
    credentialDeviceType String
    credentialBackedUp   Boolean
    transports           String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([userId, credentialID])
}

enum TeamResponsibility {
    Leader
    Coleader
    Member
}

model UserTeam {
    id     String @id @default(auto()) @map("_id") @db.ObjectId
    userId String @db.ObjectId
    teamId String @db.ObjectId

    responsibility TeamResponsibility @default(Member)
    user           User               @relation(fields: [userId], references: [id])
    team           Team               @relation(fields: [teamId], references: [id])
}

enum UpdateTo {
    ORDER_PAGE_UPDATE
    INBOX_PAGE_UPDATE
    DELIVERY
    INBOX_AND_ORDER_PAGE_UPDATE
    UPWORK_INBOX
    REVIEW_RESPONSE
    FIVERR_SUPPORT_REPLY
}

model UpdateSheet {
    id String @id @default(auto()) @map("_id") @db.ObjectId

    clientName String
    orderId    String

    message String

    attachments          String?
    commentFromOperation String?
    commentFromSales     String?
    updateTo             UpdateTo

    doneById String? @db.ObjectId
    doneBy   User?   @relation("DoneByChecks", fields: [doneById], references: [id], onDelete: Cascade)

    tlId String? @db.ObjectId
    tlBy User?   @relation("TLChecks", fields: [tlId], references: [id], onDelete: Cascade)

    updateById String @db.ObjectId
    updateBy   User   @relation("UpdateEntries", fields: [updateById], references: [id], onDelete: Cascade)

    profileId String  @db.ObjectId
    profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    sendAt    DateTime?
}

enum IssueStatus {
    open
    wip
    done
    cancelled
    dispute
}

model IssueSheet {
    id         String @id @default(auto()) @map("_id") @db.ObjectId
    clientName String
    orderId    String

    specialNotes      String?
    orderPageUrl      String?
    inboxPageUrl      String?
    fileOrMeetingLink String?
    noteForSales      String?

    status IssueStatus @default(open)

    statusChangedAt   DateTime?
    statusChangedById String?   @db.ObjectId

    statusChangedBy User? @relation("issueShetStatusChange", fields: [statusChangedById], references: [id], onDelete: Cascade)

    creatorId String @db.ObjectId
    creator   User   @relation(fields: [creatorId], references: [id], onDelete: Cascade)

    teamId String? @db.ObjectId
    team   Team?   @relation(fields: [teamId], references: [id], onDelete: Cascade)

    serviceId String   @db.ObjectId
    service   Services @relation(fields: [serviceId], references: [id], onDelete: Cascade)

    profileId String  @db.ObjectId
    profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
