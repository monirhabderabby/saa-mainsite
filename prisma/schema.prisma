datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

enum AccountStatus {
    PENDING
    ACTIVE
    PAUSED
}

enum Role {
    SUPER_ADMIN
    ADMIN
    OPERATION_MEMBER
    SALES_MEMBER
}

model User {
    id            String        @id @default(cuid())
    fullName      String?
    email         String        @unique
    emailVerified DateTime?
    image         String?
    employeeId    String        @unique
    accountStatus AccountStatus @default(PENDING)
    role          Role

    serviceId String?
    service   Services? @relation(fields: [serviceId], references: [id])

    accounts      Account[]
    sessions      Session[]
    permissions   Permissions[]
    teams         Team[]          @relation("UserTeams")
    // Optional for WebAuthn support
    Authenticator Authenticator[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Services {
    id   String @id @default(cuid())
    name String

    teams Team[]
    users User[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Team {
    id   String @id @default(cuid())
    name String

    userId    String?
    serviceId String?
    members   User[]    @relation("UserTeams")
    service   Services? @relation(fields: [serviceId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum PermissionTool {
    ISSUE_SHEET
    UPDATE_SHEET
}

model Permissions {
    id   String         @id @default(cuid())
    name PermissionTool

    // Relation to User
    userId String?
    user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

    // issue sheet (tool)
    isIssueUpdatAllowed  Boolean @default(true)
    isIssueCreateAllowed Boolean @default(false)

    // update sheet (tool)
    isMessageCreateAllowed  Boolean @default(false)
    isMessageTLCheckAllowed Boolean @default(false)
    isMessageDoneByAllowed  Boolean @default(false)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Account {
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([provider, providerAccountId])
}

model Session {
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    identifier String
    token      String
    expires    DateTime

    @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
    credentialID         String  @unique
    userId               String
    providerAccountId    String
    credentialPublicKey  String
    counter              Int
    credentialDeviceType String
    credentialBackedUp   Boolean
    transports           String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([userId, credentialID])
}
